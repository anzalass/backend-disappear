// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/capstone-kelompok-7/backend-disappear/module/entities"
	dto "github.com/capstone-kelompok-7/backend-disappear/module/feature/challenge/dto"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryChallengeInterface is an autogenerated mock type for the RepositoryChallengeInterface type
type RepositoryChallengeInterface struct {
	mock.Mock
}

// CreateChallenge provides a mock function with given fields: _a0
func (_m *RepositoryChallengeInterface) CreateChallenge(_a0 *entities.ChallengeModels) (*entities.ChallengeModels, error) {
	ret := _m.Called(_a0)

	var r0 *entities.ChallengeModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.ChallengeModels) (*entities.ChallengeModels, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entities.ChallengeModels) *entities.ChallengeModels); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ChallengeModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.ChallengeModels) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubmitChallengeForm provides a mock function with given fields: form
func (_m *RepositoryChallengeInterface) CreateSubmitChallengeForm(form *entities.ChallengeFormModels) (*entities.ChallengeFormModels, error) {
	ret := _m.Called(form)

	var r0 *entities.ChallengeFormModels
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.ChallengeFormModels) (*entities.ChallengeFormModels, error)); ok {
		return rf(form)
	}
	if rf, ok := ret.Get(0).(func(*entities.ChallengeFormModels) *entities.ChallengeFormModels); ok {
		r0 = rf(form)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ChallengeFormModels)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.ChallengeFormModels) error); ok {
		r1 = rf(form)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChallenge provides a mock function with given fields: id
func (_m *RepositoryChallengeInterface) DeleteChallenge(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: page, perpage
func (_m *RepositoryChallengeInterface) FindAll(page int, perpage int) ([]*entities.ChallengeModels, error) {
	ret := _m.Called(page, perpage)

	var r0 []*entities.ChallengeModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ChallengeModels, error)); ok {
		return rf(page, perpage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ChallengeModels); ok {
		r0 = rf(page, perpage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ChallengeModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perpage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStatus provides a mock function with given fields: page, perpage, status
func (_m *RepositoryChallengeInterface) FindByStatus(page int, perpage int, status string) ([]*entities.ChallengeModels, error) {
	ret := _m.Called(page, perpage, status)

	var r0 []*entities.ChallengeModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.ChallengeModels, error)); ok {
		return rf(page, perpage, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.ChallengeModels); ok {
		r0 = rf(page, perpage, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ChallengeModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, perpage, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTitle provides a mock function with given fields: page, perpage, title
func (_m *RepositoryChallengeInterface) FindByTitle(page int, perpage int, title string) ([]*entities.ChallengeModels, error) {
	ret := _m.Called(page, perpage, title)

	var r0 []*entities.ChallengeModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.ChallengeModels, error)); ok {
		return rf(page, perpage, title)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.ChallengeModels); ok {
		r0 = rf(page, perpage, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ChallengeModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, perpage, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSubmitChallengeForm provides a mock function with given fields: page, perpage
func (_m *RepositoryChallengeInterface) GetAllSubmitChallengeForm(page int, perpage int) ([]*entities.ChallengeFormModels, error) {
	ret := _m.Called(page, perpage)

	var r0 []*entities.ChallengeFormModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entities.ChallengeFormModels, error)); ok {
		return rf(page, perpage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entities.ChallengeFormModels); ok {
		r0 = rf(page, perpage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ChallengeFormModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perpage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChallengeById provides a mock function with given fields: id
func (_m *RepositoryChallengeInterface) GetChallengeById(id uint64) (*entities.ChallengeModels, error) {
	ret := _m.Called(id)

	var r0 *entities.ChallengeModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.ChallengeModels, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.ChallengeModels); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ChallengeModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubmitChallengeFormById provides a mock function with given fields: id
func (_m *RepositoryChallengeInterface) GetSubmitChallengeFormById(id uint64) (*entities.ChallengeFormModels, error) {
	ret := _m.Called(id)

	var r0 *entities.ChallengeFormModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (*entities.ChallengeFormModels, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint64) *entities.ChallengeFormModels); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ChallengeFormModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubmitChallengeFormByStatus provides a mock function with given fields: page, perpage, status
func (_m *RepositoryChallengeInterface) GetSubmitChallengeFormByStatus(page int, perpage int, status string) ([]*entities.ChallengeFormModels, error) {
	ret := _m.Called(page, perpage, status)

	var r0 []*entities.ChallengeFormModels
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]*entities.ChallengeFormModels, error)); ok {
		return rf(page, perpage, status)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []*entities.ChallengeFormModels); ok {
		r0 = rf(page, perpage, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ChallengeFormModels)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) error); ok {
		r1 = rf(page, perpage, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubmitChallengeFormByUserAndChallenge provides a mock function with given fields: userID
func (_m *RepositoryChallengeInterface) GetSubmitChallengeFormByUserAndChallenge(userID uint64) ([]*entities.ChallengeFormModels, error) {
	ret := _m.Called(userID)

	var r0 []*entities.ChallengeFormModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]*entities.ChallengeFormModels, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []*entities.ChallengeFormModels); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ChallengeFormModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalChallengeCount provides a mock function with given fields:
func (_m *RepositoryChallengeInterface) GetTotalChallengeCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalChallengeCountByStatus provides a mock function with given fields: status
func (_m *RepositoryChallengeInterface) GetTotalChallengeCountByStatus(status string) (int64, error) {
	ret := _m.Called(status)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalChallengeCountByTitle provides a mock function with given fields: title
func (_m *RepositoryChallengeInterface) GetTotalChallengeCountByTitle(title string) (int64, error) {
	ret := _m.Called(title)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(title)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalSubmitChallengeFormCount provides a mock function with given fields:
func (_m *RepositoryChallengeInterface) GetTotalSubmitChallengeFormCount() (int64, error) {
	ret := _m.Called()

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalSubmitChallengeFormCountByStatus provides a mock function with given fields: status
func (_m *RepositoryChallengeInterface) GetTotalSubmitChallengeFormCountByStatus(status string) (int64, error) {
	ret := _m.Called(status)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChallenge provides a mock function with given fields: id, updatedChallenge
func (_m *RepositoryChallengeInterface) UpdateChallenge(id uint64, updatedChallenge *entities.ChallengeModels) (*entities.ChallengeModels, error) {
	ret := _m.Called(id, updatedChallenge)

	var r0 *entities.ChallengeModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, *entities.ChallengeModels) (*entities.ChallengeModels, error)); ok {
		return rf(id, updatedChallenge)
	}
	if rf, ok := ret.Get(0).(func(uint64, *entities.ChallengeModels) *entities.ChallengeModels); ok {
		r0 = rf(id, updatedChallenge)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ChallengeModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, *entities.ChallengeModels) error); ok {
		r1 = rf(id, updatedChallenge)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubmitChallengeForm provides a mock function with given fields: id, updatedStatus
func (_m *RepositoryChallengeInterface) UpdateSubmitChallengeForm(id uint64, updatedStatus dto.UpdateChallengeFormStatusRequest) (*entities.ChallengeFormModels, error) {
	ret := _m.Called(id, updatedStatus)

	var r0 *entities.ChallengeFormModels
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, dto.UpdateChallengeFormStatusRequest) (*entities.ChallengeFormModels, error)); ok {
		return rf(id, updatedStatus)
	}
	if rf, ok := ret.Get(0).(func(uint64, dto.UpdateChallengeFormStatusRequest) *entities.ChallengeFormModels); ok {
		r0 = rf(id, updatedStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ChallengeFormModels)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, dto.UpdateChallengeFormStatusRequest) error); ok {
		r1 = rf(id, updatedStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepositoryChallengeInterface creates a new instance of RepositoryChallengeInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryChallengeInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryChallengeInterface {
	mock := &RepositoryChallengeInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
